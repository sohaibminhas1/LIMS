@echo off
title LIMS - Push to Repository
color 0A

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üöÄ PUSH LIMS TO REPOSITORY üöÄ                            ‚ïë
echo ‚ïë                                                                              ‚ïë
echo ‚ïë  This script will:                                                          ‚ïë
echo ‚ïë  ‚Ä¢ Clean up unnecessary files                                               ‚ïë
echo ‚ïë  ‚Ä¢ Stage all important LIMS files                                          ‚ïë
echo ‚ïë  ‚Ä¢ Commit with a clear message                                              ‚ïë
echo ‚ïë  ‚Ä¢ Push to your repository                                                  ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

cd /d "%~dp0"

echo üßπ STEP 1: Cleaning up unnecessary files...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

REM Remove temporary and unnecessary files
if exist "*.tmp" del /q "*.tmp"
if exist "*.log" del /q "*.log"
if exist "tempCodeRunnerFile.*" del /q "tempCodeRunnerFile.*"

REM Remove old test files that are no longer needed
if exist "test-*.bat" del /q "test-*.bat"
if exist "ultimate-login-test.bat" del /q "ultimate-login-test.bat"
if exist "bulletproof-login.bat" del /q "bulletproof-login.bat"
if exist "fixed-login.bat" del /q "fixed-login.bat"

echo ‚úÖ Cleanup completed!
echo.

echo üì¶ STEP 2: Staging files for commit...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

REM Initialize git if not already done
git init

REM Add all important files
git add src/
git add lib/
git add bin/
git add *.sql
git add *.md
git add RUN-LIMS.bat
git add DOWNLOAD-DRIVER.bat
git add README.md
git add ProjectDescription.txt

REM Add specific important batch files
git add START-LIMS.bat
git add SIMPLE-RUN.bat

echo ‚úÖ Files staged successfully!
echo.

echo üìù STEP 3: Committing changes...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

git commit -m "üéâ LIMS Ultimate System - Complete Working Version

‚úÖ Features:
- Ultimate bulletproof login system with multiple fallbacks
- Pre-filled admin credentials (admin/Admin123!)
- Professional full-screen UI with real-time clock
- Complete database integration with PostgreSQL
- Popup dialog system for all management panels
- Enhanced data refresh and table management
- Role-based dashboards (Admin/Teacher/Student)

üîß Technical Improvements:
- Fixed all authentication issues
- Added PostgreSQL JDBC driver
- Implemented multiple authentication fallbacks
- Enhanced UI visibility and user experience
- Complete DAO pattern implementation
- Comprehensive error handling

üöÄ Ready for Production:
- All login issues resolved
- Professional presentation ready
- Complete documentation included
- Easy deployment with batch files

üìã How to Run:
- Execute RUN-LIMS.bat
- Login with admin/Admin123!
- Enjoy the complete LIMS experience!"

if %ERRORLEVEL% EQU 0 (
    echo ‚úÖ Commit successful!
) else (
    echo ‚ö†Ô∏è  Nothing new to commit or commit failed.
)
echo.

echo üåê STEP 4: Pushing to repository...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

echo Please enter your repository details:
echo.
set /p REPO_URL="Enter your repository URL (e.g., https://github.com/username/LIMS.git): "

if "%REPO_URL%"=="" (
    echo ‚ùå No repository URL provided. Skipping push.
    goto END
)

REM Add remote origin (will overwrite if exists)
git remote remove origin 2>nul
git remote add origin %REPO_URL%

REM Push to main branch (force push to clear previous history)
echo.
echo ‚ö†Ô∏è  WARNING: This will REPLACE all previous content in your repository!
echo ‚ö†Ô∏è  Are you sure you want to continue? (Y/N)
set /p CONFIRM="Enter Y to confirm: "

if /i "%CONFIRM%"=="Y" (
    echo.
    echo üöÄ Force pushing to repository...
    git branch -M main
    git push -f origin main
    
    if %ERRORLEVEL% EQU 0 (
        echo.
        echo ‚úÖ SUCCESS! LIMS has been pushed to your repository!
        echo.
        echo üéØ Your repository now contains:
        echo   ‚Ä¢ Complete working LIMS system
        echo   ‚Ä¢ Ultimate login system with multiple fallbacks
        echo   ‚Ä¢ Professional UI and database integration
        echo   ‚Ä¢ Easy deployment with RUN-LIMS.bat
        echo   ‚Ä¢ Complete documentation
        echo.
        echo üåê Repository URL: %REPO_URL%
        echo.
        echo üìã To clone and run on another machine:
        echo   1. git clone %REPO_URL%
        echo   2. cd LIMS
        echo   3. RUN-LIMS.bat
        echo.
    ) else (
        echo ‚ùå Push failed! Please check your repository URL and credentials.
        echo.
        echo üí° Common issues:
        echo   ‚Ä¢ Repository URL is incorrect
        echo   ‚Ä¢ You don't have push permissions
        echo   ‚Ä¢ Network connectivity issues
        echo   ‚Ä¢ Authentication required (use personal access token)
    )
) else (
    echo ‚ùå Push cancelled by user.
)

:END
echo.
echo üèÅ Repository operation completed!
echo.
pause
